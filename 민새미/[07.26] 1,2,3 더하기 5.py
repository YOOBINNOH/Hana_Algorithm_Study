#기본적인 규칙은 간단하다
#dp[n][0]에는 n을 나타내는 방법중에 마지막 숫자가 1로 끝나는 경우의 수를 저장한다.
#dp[n][1]에는 n을 나타내는 방법중에 마지막 숫자가 2로 끝나는 경우의 수를 저장한다.
#dp[n][2]에는 n을 나타내는 방법중에 마지막 숫자가 3으로 끝나는 경우의 수를 저장한다.

#연속적으로 같은 수를 사용할 수 없기 때문에 dp[n][0] 뒤에는 2 혹은 3을 배치한다.
#같은 방식으로 dp[n][1] 뒤에는 1, 3
#dp[n][2] 뒤에는 1,2만 올 수 있다.

# 이런 규칙을 사용하면 
# dp[n][0]은 1로 끝나야 하므로 n보다 1작은 수인 n-1의 dp값중에 2와 3으로 끝나는 경우의 합을 저장한다.
# dp[n][1]은 2로 끝나야 하므로 n보다 2작은 수인 n-2의 dp값중에 1과 3으로 끝나는 경우의 합을 저장한다.
# dp[n][2]은 3로 끝나야 하므로 n보다 3작은 수인 n-3의 dp값중에 1과 2로 끝나는 경우의 합을 저장한다.

# 결론은 이런 규칙을 따른다.
# >   dp[n][0] = dp[n-1][1] + dp[n-1][2]
# >   dp[n][1] = dp[n-2][2] + dp[n-2][0]
# >   dp[n][2] = dp[n-3][0] + dp[n-3][1]


t=int(input())

dp=[[0]*3 for _ in range(100001)]
dp[1]=[1, 0, 0]
dp[2]=[0, 1, 0]
dp[3]=[1, 1, 1]

for i in range(4, 100001):
    dp[i][0] = (dp[i-1][1]+dp[i-1][2])%1000000009
    dp[i][1] = (dp[i-2][2] + dp[i-2][0])%1000000009
    dp[i][2] = (dp[i-3][0] + dp[i-3][1])%1000000009 

for j in range(t):
    n=int(input())
    print(sum(dp[n])%1000000009 )