# 15663_N과 M(9).py

# 풀이) 이 문제 또한 순열 라이브러리를 이용하여 풀려고 했지만 시간 초과가 나왔다. 
#       DFS를 이용하여 풀어야 했던 문제였다. 어느 정도까지가 라이브러리로 감당이 되고, 어느 정도 이상 가야지 DFS가 필요한 지 알고싶다.

# 이렇게 sys 함수를 써도 시간초과 나왔다. k라는 리스트에 이전에 넣었던 튜플들을 넣고 존재하는지 안하는지를 구분해서 풀면 정답은 잘 나오게 된다. 하지만 시간 초과..ㅎ
# from itertools import permutations
# import sys
# sys.setrecursionlimit(10**6)
# input=sys.stdin.readline

# n, m= map(int, input().split())

# arr=list(map(int, input().split(" ")))
# k=[]
# for i in sorted(permutations(arr, m)):
#     if i not in k:
#         print(*i)
#         k.append(i)
////////////////////////////////////////////////////

# 여기에서 중요한 점은 이전에 check값이 뭐였느냐에 따라서 중복되지 않게 하는 것이다!
# 푸는 방식을 참고했기 때문에 시간이 지나서 다시 풀어야 할 문제 중 하나다..!!
<DFS를 이용한 방법>
n, m= map(int, input().split())

arr=list(map(int, input().split(" ")))

arr.sort()
visited=[0]*n
out=[]
#dfs
def dfs(depth):
    check=0
    if depth==m:
        print(' '.join(map(str, out)))
        return
    for i in range(n):
        if not visited[i] and arr[i] != check:
            visited[i]=1
            check=arr[i]
            out.append(arr[i])
            dfs(depth+1)
            out.pop()
            visited[i]=0

dfs(0)

-------------------------------------------------------------------------------------------------
# 10971_외판원 순회 2.py

# 풀이) 처음 문제를 보고 DFS 백트래킹으로 풀면되겠다라고 감이 왔다.
#       그래서 이전에 DFS를 이용하여 풀었던 코드를 참고하면서 문제를 풀고자 했다.
#       visited 방문체크 리스트 만들고, 길이 없다고 되어있는 0은 제외시키고, 가장 최소값이 나오도록 하게 하는 것
#       [i][j]가 있다면 j로 시작하도록 코드를 짜려고 했다. 어떤 식으로 짜야겠다는 느낌은 왔는데 잘 안풀려서 다른 사람의 코드를 참고했다.
#       참고하여 보니 DFS의 매개변수를 3개로 받는 코드가 많이 보였다.
#       그도 그럴것이 길이 이어져서 와야 하고, 처음 시작 도시와 다음 도시들이 계속 바뀌면서 이를 저장해야 하기 때문이다!
#       2개의 풀이 코드가 있는데 두번째 코드가 더 간결하고 빠르다..!

<방법1> 
n = int(input())
arr = []
for i in range(n):
    arr.append(list(map(int, input().split())))

visited = [0] * n
out = []


check = 1e9 #1000000으로 하면 틀렸다고 나옴.. 왜 10의 9승까지로 해야하는지 모르겠음..!ㅠ
# import sys 하고 check=sys.maxsize 해서 #출력할 최소값 정의     하는 방법도 있음. 얘는 통과!

def dfs(depth, next, start):
    global check
    if depth == n and arr[next][start] != 0:
        #다 방문했으면서, 마지막 도시에서 출발 도시로 가는 비용이 0이 아니라면(즉,갈수 있다면)
        check = min(check, sum(out) + arr[next][start])

        return
    for i in range(n):
        if not visited[i] and arr[next][i] != 0:
            visited[i] = 1
            out.append(arr[next][i])
            dfs(depth + 1, i, start)
            out.pop()
            visited[i] = 0


for i in range(n):
    visited[i] = 1
    dfs(1, i, i)
    visited[i] = 0

print(check)

<방법2>
## 순환이 된다면 굳이 out이라는 리스트에서 이동하는 길의 값들을 넣어 sum()으로 더해주기보다 재귀로 넣어주는 게 좋다는 점을 이용하여 바꿔준 코드이다.
#근데 코드에 의문점이 들어서 이에 대해 스터디할 때 얘기 나눠보고 싶음!
n = int(input())
arr = []
for i in range(n):
    arr.append(list(map(int, input().split())))

visited = [0] * n
out = []

check = 1000000


def dfs(depth, next, cost):
    global check

    if depth == n - 1 and arr[next][0] != 0:
        # arr[next][0]에서 0인 이유는 애초에 visited[0]=1로 해놔서 0을 시작하는 길이라고 생각했기 때문
        # 근데 0부터 방문으로 해도 되는건지.. 그걸 모르겠음. 1로 먼저 시작하면 같은 값이 나오기도 하지만 2와 3이라고 가정하고 코드를 바꾸면 다른 값이 나옴.
        # 다 방문했으면서, 마지막 도시에서 출발 도시로 가는 비용이 0이 아니라면(즉,갈수 있다면)
        check = min(check, cost + arr[next][0])
        return

    for i in range(n):
        if not visited[i] and arr[next][i] != 0:
            visited[i] = 1
            dfs(depth + 1, i, cost + arr[next][i])
            visited[i] = 0


visited[0] = 1
dfs(0, 0, 0)
print(check)



