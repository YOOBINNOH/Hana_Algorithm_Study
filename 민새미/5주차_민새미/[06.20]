#14889_스타트와링크.py

# 풀이) DFS로 푸는지 모르겠는 문제였다..ㅠ 어떻게 접근해야할지도 감이 안잡혀서 코드를 참고하였다.
# 정답코드를 봐도 빠르게 이해가 되지 않아서 하나씩 손코딩을 해서 이해했다.
# 조합으로도 풀 수 있다고 하여 조합 코드도 아래와 같이 작성했다.
# 아직 DFS에 대해 부족하다고 느껴지는 문제였다.
# 어떻게 문제를 딱 보고 DFS로 풀면 되겠다고 어떤 점에서 느껴지는지 스터디에서 얘기 나눠보고 싶다.


import sys
n = int(input())

graph = list()
for i in range(n):
    graph.append(list(map(int, input().split())))

visited=[0 for _ in range(n)]
min_diff=sys.maxsize #int(1e9) #최소값을 갱신할 변수 생성

def dfs(depth, idx): #인덱스 변수를 인자로 받아준다.
    global min_diff
    if depth==n//2: # n은 늘 짝수로 주어진다고 했다. 주어진 수의 절반이 한 팀으로 선택되었을 떄 가지치기 시작
        p1, p2 = 0, 0
        for i in range(n):
            for j in range(n):
                if visited[i] and visited[j]: # True의 값을 가지는 팀을 스타트팀이라 할때 스타트 팀의 능력치를 모두 p1에 더하고
                    p1+=graph[i][j]
                elif not visited[i] and not visited[j]: # 나머지 절반 False의 값을 가지는 팀을 링크 팀이라 할때 링크 팀의 능력치를 모두 p2에 더한다.
                    p2+=graph[i][j]
        min_diff=min(min_diff, abs(p1-p2))
        return
    
    for i in range(idx, n): # 스타트 팀을 완성하지 못했을 때 백트래킹 실시
        if not visited[i]:
            visited[i]=1
            dfs(depth+1, i+1) # 같은 번호 중복을 막기 위한 idx+1로 재귀호출
            visited[i]=0

dfs(0, 0)
print(min_diff)


## 조합으로 푼 코드는 아래와 같다.

import sys
from itertools import combinations

n = int(sys.stdin.readline())
graph = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]
members = list(range(n))  # 1 전체 멤버를 포함하는 리스트 생성
min_value = sys.maxsize  # 2 최소값을 비교할 변수 생성

for r1 in combinations(members, n // 2):  # 3 전체멤버의 절반을 r1으로 뽑아준다(스타트 팀)
    start, link = 0, 0
    r2 = list(set(members) - set(r1))  # 4 나머지 절반은 r2로 차집합해서 뺴준 뒤 리스트화 (링크팀)
    for r in combinations(r1, 2):  # 5 스타트팀에서 2명을 뽑아 팀의 능력치를 모두 더한다.
        start += graph[r[0]][r[1]]
        start += graph[r[1]][r[0]]
    for r in combinations(r2, 2):  # 6 링크팀에서 2명을 뽑아 팀의 능력치를 모두 더한다.
        link += graph[r[0]][r[1]]
        link += graph[r[1]][r[0]]
    min_value = min(min_value, abs(start - link))  # 7 한번의 r1으로 뽑는 조합이 끝날때마다 최소값 갱신
print(min_value)



############################################################
# 빠져있길래.. 다시 추가해 넣었다.
# DFS와 비슷한 문제였다. 접근은 어느정도 했지만 구체적인 코드 작성에는 어려움을 느껴서 참고하여 풀었다.
# 방문하면서 check 함수에서도 부등호 값이 true인지 아닌지에 따라 012로 들어갈 애가 021로 나와 바뀌게 된다.



n = int(input())

arr = list(map(str, input().split()))

visited = [0] * 10
out1 = ""  # 작은값 기준
out2 = ""  # 큰값 기준


def check(i, j, k):
    if k == "<":
        return i < j
    else:
        return i > j


def dfs(depth, s):
    print(s)
    global out1, out2
    if depth == n + 1:
        # 맨 처음 생성, 최소값
        if len(out1) == 0:
            out1 = s
        # 계속 대입, 마지막에는 최대값
        else:
            out2 = s
        return
    for i in range(10):
        if not visited[i]:
            if depth == 0 or check(s[-1], str(i), arr[depth - 1]):
                visited[i] = 1
                dfs(depth + 1, s + str(i))
                visited[i] = 0


dfs(0, "")
print(out2)
print(out1)




