#11723_집합.py

#풀이) 단순 구현 문제라고 생각한다. 하지만 시간초과 문제가 나왔다.
# 그래서 sys 라이브러리를 사용하여 input을 sys.stdin.readline로 써주니 통과할 수 있었다.
# 알고리즘 분류를 보니 비트마스킹으로 푸는 문제인 것 같았다. 그래서 비트마스킹으로 푼 코드도 아래에 추가하였다.

import sys
input=sys.stdin.readline
n = int(input())

arr = list()
for i in range(n):
    a = input().split()
    if a[0] == "add":
        if int(a[1]) not in arr:
            arr.append(int(a[1]))
        else:
            continue
    elif a[0] == "remove":
        if int(a[1]) in arr:
            arr.remove(int(a[1]))
        else:
            continue
    elif a[0] == "check":
        if int(a[1]) in arr:
            print(1)
        else:
            print(0)
    elif a[0] == "toggle":
        if int(a[1]) in arr:
            arr.remove(int(a[1]))
        else:
            arr.append(int(a[1]))
    elif a[0] == "all":
        arr = list()
        for i in range(1, 21):
            arr.append(i)
    elif a[0] == "empty":
        arr = list()

------------------------------------------------
# 비트마스킹으로 푼 코드

import sys
m=int(sys.stdin.readline())
bit=0
for _ in range(m):
    command=sys.stdin.readline().split()

    if command[0]=="all":
        bit=(1<<20)-1
    elif command[0]=="empty":
        bit=0
    else:
        op=command[0]
        num=int(command[1])-1

        if op=='add':
            bit |= (1<<num)
        elif op=='remove':
            bit &= ~(1<<num)
        elif op=="check":
            if bit & (1<<num)==0:
                print(0)
            else:
                print(1)
        elif op=="toggle":
            bit=bit ^ (1<<num)




#15661_링크와 스타트
# 이전 문제와 다른 점으로 봤을 때, 무조건 짝수로 팀이 나눠지는 것은 아니면서, 인원수는 같지 않아도 되지만, 한 명 이상이어야 한다는 점이다.
# 아직 코드 작성에 어려움을 느껴 참고하여 코드를 이해해보았다..ㅠ
# 찾아본 블로그들의 코드를 돌려보니 전부 시간초과가 나와서.. 최긍네 시간 제한을 더 짧게 바꾸지 않았나 추측해본다..
# 그래서 Pypy로 통과시켜놓고, 통과한 python코드를 맞힌 문제 중에서 찾아서 돌려보고 찾아냈다.
# 그리하여 해당 코드를 공부해보았다.

# zip():튜플의 형태로 차례롤 접근할 수 있는 반복자 반환함. 두 개의 리스트에 맞춰 하나씩 짝을 지어주게 됨!
# 아래 코드에서는 zip(*S) 으로 한차례 만들고 밖에다가 zip(S, zip(*S))로 감싸 또 맞춰줌.

# 이해 어려움..ㅠ 스터디에서 언급할 예정이다..


import sys; input = sys.stdin.readline # 이렇게 작성도 가능한 것을 알게 됨!
from itertools import combinations

N = int(input())
S = [list(map(int, input().split())) for _ in range(N)]
new_S = [sum(i) + sum(j) for i, j in zip(S, zip(*S))] 
total_S = sum(new_S) // 2

m = sys.maxsize
for i in range(1, N):
    for c in combinations(new_S[1:], i):
        m = min(m, abs(total_S - sum(c)))
        if not m:
            break
    if not m:
        break
print(m)

            

