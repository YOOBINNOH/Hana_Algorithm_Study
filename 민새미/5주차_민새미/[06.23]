#1182_부분수열의 합.py

import sys
from itertools import combinations

input = sys.stdin.readline


n, s = map(int, input().split())

arr = list(map(int, input().split()))
cnt = 0

visited = [0] * n

# 경우의 수를 다 구해야 함..(조합)
out = list()

# DFS로 푼 것


def dfs(depth, m, start):
    global cnt

    k = 0
    if depth == m:
        print(out)
        for i in range(m):
            k += out[i]
        if k == s:
            # print(out)

            cnt += 1
            return
    for i in range(start, n):
        if not visited[i]:
            out.append(arr[i])
            visited[i] = 1
            dfs(depth + 1, m, i + 1)
            visited[i] = 0
            out.pop()


for i in range(1, n + 1):
    dfs(0, i, 0)


print(cnt)


## 라이브러리로 푼 것
for i in range(1, n + 1):
    comb = combinations(arr, i)

    for k in comb:
        print(k)
        if sum(k) == s:
            cnt += 1

# print(cnt)


############################################
14391_종이조각.py



def bitmask():
    global maxAns
    # 비트마스크로 2^(N*M)의 경우의 수를 따져본다 - 한칸당 가로 또는 세로로 갈 수 있는 경우의 수
    for i in range(1 << n * m):
        total = 0
        # 가로 합 계산
        for row in range(n):
            rowsum = 0
            for col in range(m):
                # idx 는 이차원 배열을 일렬로 늘렸을때의 인덱스가 어디인지 의미
                idx = row * m + col
                # 가로일때
                if i & (1 << idx) != 0:
                    rowsum = rowsum * 10 + arr[row][col]
                # 세로일때 앞에서 나온 수를 total에 더하고 rowsum 초기화
                else:
                    total += rowsum
                    rowsum = 0
            total += rowsum

        # 세로 합 계산
        for col in range(m):
            colsum = 0
            for row in range(n):
                # idx 는 이차원 배열을 일렬로 늘렸을때의 인덱스가 어디인지 의미
                idx = row * m + col
                # 세로일때
                if i & (1 << idx) == 0:
                    colsum = colsum * 10 + arr[row][col]
                # 가로일때 앞에서 나온 수를 total에 더하고 colsum 초기화
                else:
                    total += colsum
                    colsum = 0
            total += colsum
        maxAns = max(maxAns, total)


n, m = map(int, input().split())

arr = [list(map(int, input())) for _ in range(n)]

maxAns = 0
bitmask()
print(maxAns)


