# 1759_암호만들기.py

# 풀이) 보자마자 DFS로 풀면 되겠다 감이 왔다. 조합을 이용해서 푸는 문제였는데, 이때 모음, 자음이 최소 몇개 이상 들어가야하는지를 잘 봐야했다. 문제를 잘 안읽어서ㅎ 처음에는 틀렸었다..ㅎ
#       조합에서 신경써야 하는 부분은 앞에서 만든 문자를 다시 사용하지 못하도록, start라는 변수도 함께 dfs로 들어가면서 1씩 더해줘야 한다는 것이다.
#       그래서 for문을 돌릴 때, 시작 문자가 달라지게 된다! 모든 문자를 돌리지 않는다는 것이다! 이를 주의해서 풀자!

a, b = map(int, input().split())
arr = list(input().split())

arr.sort()
visited = [0] * b
out = []

def dfs(depth, start):
    x = 0
    y = 0
    if depth == a:
        for i in range(a):
            if out[i] in ["a", "e", "i", "o", "u"]:
                x += 1
            else:
                y += 1
        if x >= 1 and y >= 2:
            print("".join(out))
        return
    else:
        for i in range(start, b):
            if not visited[i]:
                out.append(arr[i])
                visited[i] = 1
                dfs(depth + 1, i + 1)

                out.pop()
                visited[i] = 0


dfs(0, 0)


#1157_단어공부.py
# 풀이) 개인적으로 공부한 문제이다.
# 브론즈라고 해서 만만한 문제가 아니었다. 문자열의 문법을 알아야지 풀 수 있는 문제였다.
# 중요하게 사용된 문법은 index(), count(), upper()이다.
# - index(x) : 위치 반환 = 리스트에 x값이 있다면 x의 위치 값을 돌려준다!
# - count(x) : 리스트에 포함된 요소 X의 개수 세기 = 리스트 안에 x가 몇 개 있는지 조사해서 개수를 돌려준다!
# - upper(x) : 소문자들을 모두 대문자로 바꿔주는 함수이다. (대문자도 대문자 그대로~)
# 나는 문자열 문법을 제대로 못 익혔던 것 같다. 처음에는 딕셔너리로 풀어야할까 생각하여 코드를 참고하면서도 참고한 코드와 다르게 딕셔너리(해시)로 풀어보았다.
# 돌려보니 통과는 했다. 그리고 참고한 코드 그대로 구현하여 돌렸더니 더 빠르게 해결되었다..!
# 리스트로 푸는 게 맞는 문제였던 것 같다.


# 해시로 푼 코드는 아래와 같다.

a = list(input().upper())
d = dict()
for i in range(len(a)):
    if a[i] in d:
        d[a[i]] += 1
    else:
        d[a[i]] = 1

arr = list()
for i in d.values():
    arr.append(i)

if arr.count(max(arr)) > 1:
    print("?")
else:
    max_idx = max(arr)
    for k, v in d.items():
        if v == max_idx:
            print(k)


# 리스트로 푼 코드는 아래와 같다.

words = input().upper()
unique_words = list(set(words))  # 입력받은 문자열에서 중복값을 제거

cnt_list = []
for x in unique_words:
    cnt = words.count(x)
    cnt_list.append(cnt)  # count 숫자를 리스트에 append

if cnt_list.count(max(cnt_list)) > 1:  # count 숫자 최대값이 중복되면
    print("?")
else:
    max_index = cnt_list.index(max(cnt_list))  # count 숫자 최대값 인덱스(위치)
    print(unique_words[max_index])
