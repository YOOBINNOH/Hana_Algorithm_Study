package BaekJoon;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

// TODO: 2023/07/06 16947번 서울지하철2호선 https://www.acmicpc.net/problem/16947
public class boj_16947_서울지하철2호선 {


    static ArrayList<Integer>[] list;
    static int n;
    static boolean[] isCycle;

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        n = scan.nextInt();

        list = new ArrayList[n + 1];
        for(int i = 1; i <= n; i++) {
            list[i] = new ArrayList<>();
        }

        for(int i = 0; i < n; i++) {
            int n1 = scan.nextInt();
            int n2 = scan.nextInt();
            list[n1].add(n2);
            list[n2].add(n1);
        }

        //싸이클을 찾아 표시해준다.
        isCycle = new boolean[n + 1];
        for(int i = 1; i <= n; i++) {
            //dfs 를 도는데 사이클 체크가 제대로 안됬으면 다시 돌린다.
            if(dfs(i, i, i))
                break;
            isCycle = new boolean[n + 1];
        }

        int[] result = new int[n + 1];
        for(int i = 1; i <= n; i++) {
            if(!isCycle[i])
                result[i] = bfs(i);
        }

        for(int i = 1; i <= n; i++)
            System.out.print(result[i] + " ");
    }

    public static int bfs(int node) {
        //큐에 추가
        Queue<Node> q = new LinkedList<>();
        boolean[] visit = new boolean[n + 1];
        q.add(new Node(node, 0));
        //큐가 비지 않았으면
        while (!q.isEmpty()) {
            Node current = q.poll();
            //꺼내온게 혹시 isCycle 트루로써 싸이클인지  확인한다
            if(isCycle[current.v])
                return current.count;
            for (int i = 0; i<list[current.v].size(); i++) {
                int next = list[current.v].get(i);
                if (!visit[next]) {
                    visit[next] = true;
                    q.add(new Node(next, current.count + 1));
                }
            }
        }
        return 0;
        //간선에서 꺼내오면서 visit true 처리해준다.

    }

    public static boolean dfs(int prev, int now, int start) {
        isCycle[now] = true;
        for (int i = 0; i < list[now].size(); i++) {
            int next = list[now].get(i);
            if (!isCycle[next]) {//싸이클에 속하는지 보고 맞으면 다음 싸이클 찾아 떠남
                if (dfs(now, next,start)) {
                    return true;
                }
                //아래 : 다음값이 이전값과 같지 않아야함(뒤로 돌아가는거 방지), 다음값이 첫 시작과 같으면 싸이클
            }else if(next !=prev && next == start)
                return true;
        }
        isCycle[now] = false;
        return false;
    }

    public static class Node {
        int v;
        int count;

        public Node(int v, int count) {
            this.v = v;
            this.count = count;
        }
    }
}


========================================

숨바꼭질


package BaekJoon;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

import static java.lang.System.exit;

// TODO: 2023/07/06 1687번 숨바꼭질 실버1 https://www.acmicpc.net/problem/1697
// TODO: 2023/07/06 !!성공!!
public class boj_1697_숨바꼭질 {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer stk = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(stk.nextToken());
        int m = Integer.parseInt(stk.nextToken());
        if (n == m) {
            System.out.println(0);
            exit(0);
        }
        bfs(n, m);
    }

    static void bfs(int n, int m) {
        Queue<int[]> q = new LinkedList();
        boolean[] visit = new boolean[100001];
        q.add(new int[]{n,0});
        while (!q.isEmpty()) {
            int[] target = q.poll();
            if (target[0] > 100000) {
                continue;
            }
            if (visit[target[0]]) {
                continue;
            }
            visit[target[0]] = true;
            if(target[0]<m) {
                if (target[0]*2==m){
                    System.out.println(target[1]+1);
                    exit(0);
                }
                q.offer(new int[]{target[0] * 2,target[1]+1});//순간이동 할때
            }
            if(target[0]<m){
                if (target[0]+1==m){
                    System.out.println(target[1]+1);
                    exit(0);
                }
                q.offer(new int[]{target[0]+1,target[1]+1});//순간이동 할때
            }
            if (target[0]>0) {
                if (target[0]-1==m){
                    System.out.println(target[1]+1);
                    exit(0);
                }
                q.offer(new int[]{target[0]-1,target[1]+1});//순간이동 할때            }
        }
    }
//    static void dfs(int n, int nextN, int m,int cnt){
//        if (nextN == m) {
//            System.out.println(cnt);
//            return;
//        }
//        if (nextN <= m) {
//            dfs(n,nextN*2,m,cnt+1);
//            dfs(n,nextN +1,m,cnt+1);
//            dfs(n,nextN-1,m,cnt+1);
//        } else {
//            return;
//        }
//    }
}}
