

/**
 * 백트래킹 문제중에 서브셋을 이용한 풀이이다!
 * 모든 항목들을 depth까지 더하면 모든 항목을 포함한 subset이게 된다.
 * depth는 + 1 해주면서 value를 더해주지 않으면 해당 value가 빠진 subset이 만들어지게 된다.
 * 더해지고 빼진원소들을 기반으로 더해진 원소들만 모아보면 부분수열이 완성된다.
 * 예외 사항으로 모두 더하지 않았을때가 문제인데. 타겟 넘버가 0일경우 모든걸 안더하면 1이 더해지기때문에
 * if(타겟넘버 == 0 ) cnt = cnt -1 을 해준다.
 * */

// TODO: 2023/06/23 1182번 부분수열의 합 (실버2)
// TODO: 2023/06/23 !!성공!!
public class boj_1182_부분수열의합 {
    static int n, s;
    static int[] arr;
    static int cnt = 0;
    static List<Integer> list = new ArrayList<>();
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        String[] line = br.readLine().split(" ");
        n = Integer.parseInt(line[0]);
        s = Integer.parseInt(line[1]);
        arr = new int[n+1];
        line = br.readLine().split(" ");
        for (int i = 1; i < n+1; i++)
            arr[i] = Integer.parseInt(line[i-1]);
        if (s == 0) {
            cnt--;
        }
        back(1,0);
        bw.write(cnt + "\n");
        bw.flush();
        bw.close();
    }
    static void back(int depth,int sum){

        if (depth == n+1) {
            return;
        }
        if(sum  +arr[depth]== s){
            cnt++;
        }
        // -7 -3 -2 5 8
        // -7 -3 -2 5
        // -7 -3 -2 8
        // -7 -3 -2
        // -7 -3  5 8
        // -7 -3  5
        // -7 -3  8
        back(depth + 1, sum + arr[depth]);
        back(depth + 1, sum);
    }

}


===============================================================================


/**
* 14391번 : 종이조각 (골드 3)
* 
*   풀이를 보기 전 생각 : 이게 뭔소리야.....
*   2차원 배열로 선언한다음 잘라냈는지 상태 확인이 필요한 똑같은 배열이 필요할듯하다.
*   진짜 접근조차 못하겠다 성장은 언제 할 수 있을까 암울하다.. 코테 공부하다 우울증 올것같아
*
*
 **/

 import java.util.*;
import java.io.*;

public class Main {
	static int N, M;
	static int[][] p;
	static boolean[][] visit;
	static int answer = 0;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		p = new int[N][M];
		visit = new boolean[N][M];

		for(int i=0;i<N;i++) {
			String input = br.readLine();
			for(int j=0;j<M;j++)
				p[i][j] = input.charAt(j) - '0';
		}
		/////// 위의 코드에서 string 으로 전달받은 숫자를 charat 사용한뒤에 '0'을 빼줘서 int 형으로 초기화 시킴.
		DFS(0, 0, 0);
		System.out.println(answer);
	}

	static void DFS(int depth, int num, int sum) {
        //DFS의 매개변수는 depth, num sum 이다.
        //depth를 이용해 종료 시점을 정하고, 접근할 행, 열의 위치를 구한다.
        //nums에는 종이를 자른 값을 저장한다. 한칸씩 더 자를때마다 행,열 위치를 구한다.
        //sum에는 종이를 그만 자르고자 할때, num 값을 누적하여 더한다. 이때 sum에 더해준 num은 0으로 초기화 해야함.
		if(depth == N*M) {
			answer = Math.max(sum, answer);
			return;
		}

		int r = depth / M;
        
		int c = depth % M;
        //매개변수로 전달받은 depth를 통해 배열의 행과 열을 구한다.
        //구간 배열의 위치를 이미 방문했다면, 아무것도 진행하지 않고 다음 DFS를 호출한다.

		if(visit[r][c]) {
			DFS(depth + 1, num, sum);
		}
		else {
			visit[r][c] = true;
			num = num * 10 + p[r][c];
			DFS(depth + 1, 0, sum + num);

			int i, temp = num;
			for(i=r+1;i<N;i++) {
				if(visit[i][c])
					break;

				visit[i][c] = true;
				temp = temp * 10 + p[i][c];
				DFS(depth + 1, 0, sum + temp);
			}
			
			for(int j=r+1;j<i;j++)
				visit[j][c] = false;
			
			temp = num;
			for(i=c+1;i<M;i++) {
				if(visit[r][i])
					break;
				visit[r][i] = true;
				temp = temp * 10 + p[r][i];
				DFS(depth + i - c + 1, 0, sum + temp);
			}

			for(int j=c+1;j<i;j++)
				visit[r][j] = false;
			
			visit[r][c] = false;
		}
	}

