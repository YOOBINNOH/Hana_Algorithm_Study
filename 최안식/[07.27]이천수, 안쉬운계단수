package BaekJoon;

// TODO: 2023/07/27 2193번 이친수 (실버 3) https://www.acmicpc.net/problem/2193

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class boj_2193_이친수 {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        long dp[] = new long[n + 1];
        dp[1] = 1l;
        dp[2] = 1l;
        for (int i = 3; i < n + 1; i++) {
            dp[i] = dp[i - 2] + dp[i - 1];
        }
        System.out.println(dp[n]);
    }
}

----------------

package BaekJoon;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

// TODO: 2023/07/27 10844번 쉬운 계단 수 https://www.acmicpc.net/problem/10844
public class boj_10844_쉬운계단수 {
    static final long MOD = 1_000_000_000L;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        long dp[][] = new long[N + 1][10];
        // init
        for(int i=0; i<=9; i++) {
            dp[1][i] = 1L;
        }

        for (int i = 2; i < N+1; i++) {
            dp[i][0]=dp[i - 1][1];
            for (int j = 1; j <= 9; j++) {
                //i번째 자리수에 0(j)로 시작하는 숫자 ex i=3, j=0 일경우, 010, 012
                //자연수에서 자리수란 3일경우 100의 자리수를 이야기한다.
                //i번째 자리수에 9(j)로 시작하는 숫자는 ex i=1, j=9일경우, 9
                //i번째 자리수에 9(j)로 시작하는 숫자는 ex i=2, j=9일경우, 98
                //i번째 자리수에 9(j)로 시작하는 숫자는 ex i=3, j=9일경우, 989, 987
                //i=3 일때 3번째 자리에 9가 오기 위해서는 8이 와야하는데 이거는
                // i=3, j=8 인경우 ==> 87,89 에서 가져와서 3번째 자리에 9가 붙으면 된다.
                //따라서 식은 아래와 같다.
                if(j==9) dp[i][9] = dp[i-1][8]%MOD;
                //반대로 2~8 사이의 숫자들을 만들기 위해서는, +1, -1 에서 파생된 숫자가 필요함.
                //이전 값들을 가져오면서 앞자리에 붙이는 개념, dp[i-1][j-1] + dp[i-1][j+1]
                else dp[i][j] = (dp[i-1][j-1]%MOD + dp[i-1][j+1]%MOD)%MOD;
            }
        }
//        for(int i=2; i<=N; i++) {
//            // 0으로 시작하는 수의 개수
//            dp[i][0] = dp[i-1][1];
//            for(int j=1; j<=9; j++) {
//                // 9일경우는 이전 자릿수의 8로 시작하는 수의 개수와 동일하다!
//                if(j == 9) dp[i][9] = dp[i-1][8] % MOD;
//                    // 나머지 수들은 이전 숫자의 j-1로 시작하는 수의 개수와 j+1로 시작하는 수의 개수를 더한 값이다.
//                else dp[i][j] = (dp[i-1][j-1] % MOD + dp[i-1][j+1] % MOD) % MOD;
//            }
//        }

        long result = 0;
        for(int i=1; i<=9; i++) {
            result = (result + dp[N][i]) % MOD;    // 정답을 더하면서 오버플로우가 발생할 수 있으므로 주의!
        }
        System.out.print(result);
    }
}
