// 백준_골드4_1261번_BFS_알고스팟

/*
풀이>
전체적으로 BFS로 풀이하였습니다.

이 풀이에서 핵심은 
이차원 배열인 visit을 각 지점까지 오는데 부순 최소 벽의 수로 설정하여
각 지점을 방문하려 할때 이미 저장되어있는 최소벽의 수 보다 현재 접근하는 최소 벽의 수가 더 작을 시
해당 지점의 최소 벽의 수를 갱신해주도록 하여 목표지점까지의 최소 벽의수를 찾아내도록 
구현한 부분입니다.

queue의 원소를 pair<pair<행,열>,부순 벽의수> 로 설정하였다.
*/


#include<iostream>
#include<string>
#include<queue>

using namespace std;

int bfs(int N, int M, int (*map)[101], int (*visit)[102]) {
	queue <pair<pair<int, int>, int>> que;
	pair<pair<int, int>, int> p2;
	pair<int, int> p;
	int sol = 100000;

	int arr1[4] = { 0,1,0,-1 };
	int arr2[4] = { 1,0,-1,0 };

	p.first = 1;
	p.second = 1;
	p2.first = p;
	p2.second = 0;
	visit[1][1] = 0;

	que.push(p2);

	while (!que.empty()) {
		int a = que.front().first.first;
		int b = que.front().first.second;
		int count = que.front().second;

		if (a == N && b == M) {
			if (sol > count) {
				sol = count;
			}
		}

		que.pop();

		for (int i = 0; i < 4; i++) {
			if ((a + arr1[i] > 0 && a + arr1[i] <= N) && (b + arr2[i] > 0 && b + arr2[i] <= M)) {
				if (map[a + arr1[i]][b + arr2[i]] == 0) {
					if (visit[a + arr1[i]][b + arr2[i]] > count) {
						visit[a + arr1[i]][b + arr2[i]] = count;
						p.first = a + arr1[i];
						p.second = b + arr2[i];
						p2.first = p;
						p2.second = count;
						que.push(p2);
					}
				}
				else {
					if (visit[a + arr1[i]][b + arr2[i]] > count + 1) {
						visit[a + arr1[i]][b + arr2[i]] = count + 1;
						p.first = a + arr1[i];
						p.second = b + arr2[i];
						p2.first = p;
						p2.second = count + 1;
						que.push(p2);
					}
				}
			}
		}
	}

	return sol;
}

void init_visit(int (*visit)[102], int N, int M) {

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			visit[i][j] = 1000;
		}
	}
}

int main() {

	int N, M;
	string str;
	int map[101][101] = { 0, };
	int visit[102][102] = { 0, };
	int sol;

	cin >> M >> N;


	for (int i = 1; i <= N; i++) {
		cin >> str;
		for (int j = 1; j <= M; j++) {
			map[i][j] = str[j - 1] - '0';
		}
	}

	init_visit(visit, N, M);

	sol = bfs(N, M, map, visit);

	cout << sol;

	return 0;
}
