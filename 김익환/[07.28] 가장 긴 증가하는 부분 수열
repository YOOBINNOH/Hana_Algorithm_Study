// 백준_실버2_11053번_DP_가장 긴 증가하는 부분 수열

/*
풀이>
전체적인 풀이는 bottom-top으로 풀이하였습니다.

	1. arr로 수열을 입력받는다.
	2. dp[n] 의 값을 1로 초기화
	3. **점화식**
	   arr[1] ~ arr[n-1] 과 arr[n]을 하나씩 비교하면서 arr[n]이 더 큰 수 일때,
	   dp[n] = dp[n-a] + 1 (a는 해당 인덱스를 표현하기 위한 수)
	4. 3번을 실행하고 최종적으로 나온 dp[n]을 sol과 비교하여 가장 긴 증가하는 수열 길이 갱신.


*/

#include<iostream>

using namespace std;

int main() {

	int N;
	int* arr;
	int* dp;
	int sol;

	cin >> N;
	arr = new int[N + 1]{ 0, };
	dp = new int[N + 1]{ 0, };

	for (int i = 1; i <= N; i++) {
		cin >> arr[i];
	}

	dp[1] = 1;
	sol = 1;

	for (int i = 2; i <= N; i++) {
		dp[i] = 1;	// 자기 자신만 가졌을때인 1로 초기화
		for (int j = 1; j < i; j++) {
			if (arr[i] > arr[j]) {
				if (dp[i] < dp[j] + 1) {
					dp[i] = dp[j] + 1;
				}
			}
		}
		if (sol < dp[i]) {
			sol = dp[i];
		}
	}
	
	cout << sol;

	delete[] arr;
	return 0;
}
