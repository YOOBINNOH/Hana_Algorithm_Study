// 백준_실버2_1912번_DP_연속합

/*
풀이>
연속되는 몇 개의 수를 선택해서 구할 수 있는 가장 큰 합을 구해야한다.

	1. dp[1] = arr[1] 로 할당, sol = dp[1]로 할당
	2. dp[n] = dp[n-1] + arr[n] 과 arr[n] 중에 큰 값을 할당
	3. dp[n] 을 구할때마다 sol과 비교하여 dp[n]이 더 크면 sol갱신
	4. sol 출력

*/

#include<iostream>

using namespace std;

int main() {

	int n;
	int* arr;
	int* dp;
	int sol;

	cin >> n;
	arr = new int[n + 1]{ 0, };
	dp = new int[n + 1]{ 0, };


	for (int i = 1; i <= n; i++) {
		cin >> arr[i];
	}

	dp[1] = arr[1];

	sol = dp[1];

	for (int i = 2; i <= n; i++) {
		if (dp[i - 1] + arr[i] > arr[i]) {
			dp[i] = dp[i - 1] + arr[i];
		}
		else {
			dp[i] = arr[i];
		}

		if (sol < dp[i]) {
			sol = dp[i];
		}
	}

	cout << sol;

	delete[] arr;
	delete[] dp;

	return 0;
}
