// 백준_실버1_7562번_나이트의 이동

/*
풀이>
bfs를 사용하였고 queue에 좌표값과 이동횟수의 정보를 넣어 최소 이동횟수를 구할 수 있게 만들었습니다.
한칸씩이동이 아니라 나이트의 이동방식을 따라하는 부분만 주의하면 되는 문제였습니다.

*/



#include<iostream>
#include<queue>

using namespace std;

int visit[302][302] = { 0, };

int l;
int sa, sb;
int ea, eb;
int sol = 0;

void init() {

	for (int i = 0; i <= l; i++) {
		for (int j = 0; j <= l; j++) {
			visit[i][j] = 0;
		}
	}
}

void bfs() {

	queue<pair<pair<int, int>,int>> que;
	pair<pair<int, int>, int> p2;
	pair<int, int> p;
	int arr1[8] = { -2,-1,1,2,2,1,-1,-2 };
	int arr2[8] = { 1,2,2,1,-1,-2,-2,-1 };

	p.first = sa;
	p.second = sb;
	p2.first = p;
	p2.second = 0;
	que.push(p2);
	visit[sa][sb] = 1;

	while (!que.empty()) {
		int a = que.front().first.first;
		int b = que.front().first.second;
		int count = que.front().second;
		que.pop();
		if (a == ea && b == eb) {
			sol = count;
			break;
		}

		for (int i = 0; i < 8; i++) {
			if (0 <= a + arr1[i] && a + arr1[i] < l && 0 <= b + arr2[i] && b + arr2[i] < l) {
				if (visit[a + arr1[i]][b + arr2[i]] == 0) {
					p.first = a + arr1[i];
					p.second = b + arr2[i];
					p2.first = p;
					p2.second = count + 1;
					que.push(p2);
					visit[a + arr1[i]][b + arr2[i]] = 1;
				}
			}
		}

	}


}

int main() {

	int T;
	
	cin >> T;

	for (int i = 0; i < T; i++) {
		init();
		sol = 0;
		cin >> l;
		cin >> sa >> sb;
		cin >> ea >> eb;

		bfs();
		cout << sol << '\n';
	}



	return 0;
}
