// 백준_실버1_10844번_DP_쉬운계단수

/*
풀이> 
	1. 마지막에 위치하는 수를 0 / 1~8 / 9 와 같이 세가지로 분류함
	2. 마지막에 0이 오려면 직전에 1이어야함
	   dp[i][j] = (dp[i - 1][j + 1])  // j == 0 일때
	3. 마지막에 1~8이 오려면 직전에 각 수의 +1 or -1 이어야함
	   dp[i][j] = (dp[i - 1][j + 1] + dp[i - 1][j - 1])  // j == 1~8 일때
	4. 마지막에 9가 오려면 직전에 8이어야함
	   dp[i][j] = (dp[i - 1][j - 1])  // j == 9 일때

	5. 각 경우의 수를 구할때, % 1000000000 을 해준다.
	5. 총 합을 구하는 dp2를 걔산할때도 dp값들의 합에 %1000000000을 해준다.

*/


#include<iostream>

using namespace std;

long long dp[101][101];
long long dp2[101];
long long arr[101];

int main() {

	int N;

	cin >> N;

	for (int i = 1; i <= 9; i++) {
		dp[1][i] = 1;
	}
	dp2[1] = 9;
	
	for (int i = 2; i <= N; i++) {
		for (int j = 0; j <= 9; j++) {
			if (j == 0) {
				dp[i][j] = (dp[i - 1][j + 1]) % 1000000000;
			}
			else if (1 <= j && j <= 8){
				dp[i][j] = (dp[i - 1][j + 1] + dp[i - 1][j - 1]) % 1000000000;
			}
			else {
				dp[i][j] = (dp[i - 1][j - 1]) % 1000000000;
			}

			dp2[i] += dp[i][j];
		}
		dp2[i] = dp2[i] % 1000000000;

	}

	cout << dp2[N];


	return 0;
}
