// 백준_실버1_1149번_DP_RGB거리

/*
풀이>
	bottom-top 방식으로 풀이했다,
	1. 점화식 : dp[n][1] = (dp[n-1][2] 과 dp[n-1][3] 중 작은 것) + arr[n][1]
	2. dp[n][1] , dp[n][2], dp[n][3] 을 비교하여 가장 적은값 출력
*/



#include<iostream>

using namespace std;

int arr[1001][4] = { 0, };
int dp[1001][4] = { 0, };

int main() {

	int N;
	int sol = 0;

	cin >> N;

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= 3; j++) {
			cin >> arr[i][j];
		}
	}

	dp[1][1] = arr[1][1];
	dp[1][2] = arr[1][2];
	dp[1][3] = arr[1][3];

	for (int i = 2; i <= N; i++) {
		if (dp[i - 1][2] < dp[i - 1][3]) {
			dp[i][1] = arr[i][1] + dp[i - 1][2];
		}
		else {
			dp[i][1] = arr[i][1] + dp[i - 1][3];
		}

		if (dp[i - 1][1] < dp[i - 1][3]) {
			dp[i][2] = arr[i][2] + dp[i - 1][1];
		}
		else {
			dp[i][2] = arr[i][2] + dp[i - 1][3];
		}

		if (dp[i - 1][1] < dp[i - 1][2]) {
			dp[i][3] = arr[i][3] + dp[i - 1][1];
		}
		else {
			dp[i][3] = arr[i][3] + dp[i - 1][2];
		}

		sol = dp[N][1];
		if (sol > dp[N][2]) {
			sol = dp[N][2];
		}
		if (sol > dp[N][3]) {
			sol = dp[N][3];
		}
		
	}


	cout << sol;



	return 0;
}
