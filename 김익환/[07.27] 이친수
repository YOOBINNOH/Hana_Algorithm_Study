// 백준_실버3_2193번_DP_이친수

/*
풀이>
이번에 푼 풀이가 더 근거있는 점화식 풀이 과정이라고 생각한다.

	발상> 
	1. 끝에 1이 오면 이전에 0만 올수있고, 끝에 0이 오면 이전에 0,1 둘 다 올 수 있다.
	2. dp배열을 각 경우를 나눈 dp배열로 설정, dp2 배열을 최종 dp 배열로 설정
	3. dp[n][1] = dp[n - 1][0];  dp[n][0] = dp[n - 1][1] + dp[n - 1][0];
	4. dp2[n] = dp[n][1] + dp[n][0];

*/


#include<iostream>

using namespace std;

long long dp[91][3];
long long dp2[91];

int main() {

	int N;
	

	cin >> N;

	dp[1][0] = 0;
	dp[1][1] = 1;
	dp2[1] = 1;

	dp[2][0] = 1;
	dp[2][1] = 0;
	dp2[2] = 1;
	
	for (int i = 3; i <= N; i++) {
		dp[i][1] = dp[i - 1][0];
		dp[i][0] = dp[i - 1][1] + dp[i - 1][0];
		dp2[i] = dp[i][1] + dp[i][0];
	}

	cout << dp2[N];


	return 0;
}
