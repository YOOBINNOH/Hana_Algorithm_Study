# 13023_ABCDE.py

# 후기)
# DFS로 푸는 문제라고 하는데 도대체 어떻게 깊게 들어가야 하는지를 모르겠어서 코드를 참고하여 풀었다.
# 처음 예시만 보고서는 BFS로 가능할거 같은데 싶어서 BFS로 무작정 풀었는데 예시2를 보니 아.. BFS로 풀리지 않는 문제인가 싶었다...
# 코드를 보면서 문제 이해도 잘 안됐다는 걸 알았다. 하하. 문제는 꼼꼼히 읽고 이해한 다음에 풀자^^

# 풀이)
# A, B, C, D  4명의 친구들과의 연결이 성공의 유무를 결정하기 떄문에 깊이를 4로 지정하고 4 이상이면 성공, 4 미만이면 실패다.

n, m = map(int, input().split())

relations = [[] for _ in range(n)]

visited = [0] * 2001  # 방문 체크

ans = 0  # 성공 표시 변수

for i in range(m):
    a, b = map(int, input().split())
    # 친구 관계 등록
    relations[a].append(b)  # a와 연결되어 있는 친구들 추가
    relations[b].append(a)


def dfs(depth, idx):
    global ans
    visited[idx] = 1

    if depth == 4:  # 친구 관계가 4번 이상 연결되어 있다면
        ans = 1  # 성공 표시 후 리턴
        return

    for i in relations[idx]:  # 친구 관계가 존재하는 지 확인
        if not visited[i]:
            visited[i] = 1
            dfs(depth + 1, i)
            visited[i] = 0


for i in range(n):
    # 친구 관계 탐색
    dfs(0, i)
    visited[i] = 0
    if ans:
        break

if ans:
    print(1)
else:
    print(0)



######################################################################
# 1248_맞춰봐.py

# 후기)
문제 이해가 처음에 잘 안됐다.. 어떻게 풀어야 하는건지도 잘 모르겠어서 문제 해석과 풀이 모두 참고하였다.
근데도 아직 이해가 완벽히 안된 것 같다.. 다시 봐야할 문제..

# 풀이)
예제로 보면 첫번째줄 : -+0+ / 두번째줄 : +++ / 세번째줄 : -- / 네번째줄:+ 이다.
A = [-2, 5, -3, 1]일 때,
부호의 뜻은 첫번째줄 : A[0], A[0]+A[1], A[0]+A[1]+A[2], A[0]+A[1]+A[2]+A[3] 
두번째줄 : A[1], A[1]+A[2], A[1]+A[2]+A[3] .... 으로 합의 부호를 나타낸 것이다.

solve함수는 S의 대각선값이 0일때와 0이 아닐때로 나눠서 생각한다.
S[index][index]가 0이라면 구해야 하는 배열의 index값이 0이라는 뜻이니 0을 넣고 다음 인덱스의 함수를 부른다.
S[index][index]값이 0이 아니라면 양, 음에 따라 1~10, -10~-1 범위의 숫자를 조사한다. ck함수로 S의 부호들에 맞는 값인지 확인한다.


#부호와 합이 일치하는지 확인하는 함수
def ck(idx):
    hap = 0
    for i in range(idx, -1, -1):
        hap += result[i]
        if hap == 0 and S[i][idx] != 0:
            return False
        elif hap < 0 and S[i][idx] >= 0:
            return False
        elif hap > 0 and S[i][idx] <= 0:
            return False
    return True

def solve(idx):
    if idx == N:
        return True
    if S[idx][idx] == 0:
        result[idx] = 0
        return solve(idx+1)
    for i in range(1, 11):
        result[idx] = S[idx][idx] * i
        if ck(idx) and solve(idx+1):
            return True
    return False

N = int(input())
arr = list(input())
S = [[0]*N for i in range(N)]
for i in range(N):
    for j in range(i, N):
        temp = arr.pop(0)
        if temp == '+':
            S[i][j] = 1
        elif temp == '-':
            S[i][j] = -1

result = [0] * N
solve(0)
print(' '.join(map(str, result)))


