# 40%에서 계속 실패해서 구글링 했습니다. 이차원 리스트로 하다가도 안됐었는데 여기도 2차원 리스트로 했더라고요. 중요한 건 bfs 함수를 따로 빼서 개발한거 같습니다.
# 이렇게 안하다가 계속 꼬였네요. 그리고 연결된 노드가 없을때도 count +=1 을 해줘야 하더라고요

import sys
from collections import deque

input = sys.stdin.readline


def bfs(start):
    queue = deque([start])
    visited[start] = True
    
    while queue:
        
        node = queue.popleft()
        
        for i in graph[node]:
            if not visited[i]:
                visited[i] = True
                queue.append(i)


N, M = map(int, input().split())

graph = [[] for _ in range(N + 1)]

for _ in range(M):
    
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)


visited = [False] * (1 + N)
count = 0  

for i in range(1, N + 1):
    
    # 방문 안했으면
    
    if visited[i]==False:

        # 연결된 노드가 없으면
        
        if len(graph[i]) ==0:  
            count += 1  
            visited[i] = True

        # 연결된 노드가 있으면
        
        else: 
            bfs(i)  
            count += 1 

print(count)







'''
    아래 방식으로는 40% 에서 오류 남

    k = deque(k)

    while k:
        x,y = k.popleft()

        # 둘 다 이미 방문 한 거라면
        
        if visited[x-1] == True and visited[y-1] == True:
            answer -= 1
            
        

        # 둘 중 하나만 방문한거라면 
        
        if (visited[x-1] == True and visited[y-1] == False) or (visited[y-1] == True and visited[x-1] == False):
            visited[x-1] = True
            visited[y-1] = True

        # 둘 다 처음 방문(새 간선이라면)
        
        else:
            answer += 1
            
            visited[x-1] = True
            visited[y-1] = True

    print(answer)
            


    '''
    
    
