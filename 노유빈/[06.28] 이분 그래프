import sys
from collections import deque


'''
# 2. BFS 를 통해 체크 -> 깊이에 따라 -1 이나 1 을 칠해주며 중복이 된 경우 False 를 return 하려고함
# 다 True 만 나옴 -> 아이디어는 맞는데 구현에서 꼬인듯


# 이분탐색 체크

def check(k,V):

    index = 0

    temp = deque()

    # queue 초기화

    queue = deque()
    
    # bfs로 깊이%2 의 값에 따라 1 또는 -1 로 칠해주기

    for i in range(0,len(k)):
        if len(k[i]) != 0:
            queue.append(i)

    while queue:
        

        x = queue.popleft()

        # temp 임시 큐에 값 넣어주기

        for i in k[x]:
            if visited[i] == False:
                temp.append(i)

        # 방문했는지 체크

        if visited[x] == False:

            visited[x] = True

            # index 값에 따라 색깔 칠하기(-1 or 1)

            if index%2 == 0:

                if color[x] != 0:

                    if color[x] == 1:
                        return False

                else:
                    color[x] = -1
                    

            else:

                if color[x] != 0:

                    if color[x] == -1:
                        return False

                else:
                    color[x] = 1


        if len(queue) == 0:
            queue = temp
            index+=1
            
            temp = deque()
              
    
    return True
        
'''


    
'''
    # 1. 틀린 로직 : 처음 접근 한 로직 -> 그냥 아예 틀린 로직
    
    while k:

        # 두 숫자 뽑기
        temp = k.popleft()
        x = temp[0]
        y = temp[1]

        # 방문 안했을 때

        # (숫자-1)%2 == 0 면 -1 else:1 로 칠하기
        
        if visited[x-1] == False:

            if (x-1)%2 == 0:

                if color[x-1]!=0:

                    if color[x-1] == 1:

                        return False
                    
                color[x-1] = -1

            else:
                
                if color[x-1]!=0:

                    if color[x-1] == -1:

                        return False                   
                
                
                color[x-1] = 1
                
                
            
        if visited[y-1] == False:
            
            if (y-1)%2 == 0:
                
                if color[y-1]!=0:

                    if color[y-1] == 1:

                        return False

                color[y-1] = -1

            else:
                
                if color[y-1]!=0:

                    if color[y-1] == -1:

                        return False
                    
                color[y-1] = 1

    print(color)        
    return True
    
'''
        
        

    
'''


num = int(sys.stdin.readline())

for i in range(num):

    

    # 정점의 개수 / 간선의 개수
    
    V,E = list(map(int, sys.stdin.readline().split()))

    k = [[] for i in range(V)]

    visited = [False] * V

    # color 를 -1,1 로 번갈아서 칠하기
        
    color = [0] * V
        

    for j in range(E):
        x,y = list(map(int, sys.stdin.readline().split()))

        k[x-1].append(y-1)
        k[y-1].append(x-1)


    
    
    if check(k,V) == True:
        print("YES")
    else:
        print("NO")
        


'''




# 정답 코드 : 구글링 함

import sys
from collections import deque

input = sys.stdin.readline


# bfs
def bfs(start, group):
    queue = deque([start])  # 시작 정점 값을 큐에 담는다.
    visited[start] = group  # 시작 정점 그룹을 설정
    while queue:  # 큐가 존재할때까지 돈다.

        x = queue.popleft()  # 큐의 맨앞 원소를 빼낸다.

        for i in graph[x]:  # 해당 정점에서 갈 수 있는 하위 정점들을 돈다.
            if not visited[i]:  # 만약 그 정점들을 아직 방문하지 않았다면
                queue.append(i)  # 그 정점들을 추가하고
                visited[i] = -1 * visited[x]  # 상위 정점과 다른 그룹으로 편성
            elif visited[i] == visited[x]:  # 만약 정점들을 이미 방문했었는데 같은 그룹이라면
                return False  # False를 바로 리턴
    return True  # 위의 조건에 걸리지 않았다면 True를 리턴


for _ in range(int(input())):
    V, E = map(int, input().split())
    graph = [[] for i in range(V + 1)]  # 빈 그래프 생성
    visited = [False] * (V + 1)  # 방문한 정점 체크

    for _ in range(E):
        a, b = map(int, input().split())
        graph[a].append(b)  # 무방향 그래프
        graph[b].append(a)  # 무방향 그래프

    for i in range(1, V + 1):
        if not visited[i]:  # 방문한 정점이 아니면, bfs 수행
            result = bfs(i, 1)
            if not result:
                break

    print('YES' if result else 'NO')















    
        
    
