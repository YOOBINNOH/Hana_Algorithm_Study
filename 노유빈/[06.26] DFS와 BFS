import sys
from collections import deque





# 처음 풀이 : 2차원 리스트를 사용하지 않고 풀었고 시간 초과가 났다.

'''
k = [ ]

for i in range(m):
    k.append(list(map(int,input().split(" "))))


k = list(sorted(k))


# dfs


visited1 = [False] * (n+1)
visited1[v] = True

visited1[0] = True

print(v,end= " ")


def dfs(v,visited1):

    
    if visited1 == True:
        return 0
        
        

    for i in range(0,len(k)):

        if v in k[i]:
            
            if v == k[i][0]:
                if visited1[k[i][1]] == False:
                    visited1[k[i][1]] = True
                    
                    print(k[i][1],end = " ")
                    dfs(k[i][1],visited1)

            else:
                if visited1[k[i][0]] == False:
                    visited1[k[i][0]] = True
                    
                    print(k[i][0],end = " ")
                    dfs(k[i][0],visited1)
  
def dfs(v):
    visited1[v] = True
    print(v,end=" ")

    for i in k[v]:
    


dfs(v,visited1)



# bfs

print()

queue = deque()
queue.append(v)

visited2 = [False] * (n+1)


while queue:

    temp = queue.popleft()
    if visited2[temp] == False:
        
        print(temp,end =" ")
        visited2[temp] = True

    for i in range(0,len(k)):

        if temp in k[i]:

            if temp == k[i][0]:
                if visited2[k[i][1]] == False:
                    queue.append(k[i][1])

            else:
                if visited2[k[i][0]] == False:
                    queue.append(k[i][0])
                

            
'''

# 정답 코드 : 구글링 했고 이차원 리스트를 만들어서 해줬다. 이 생각은 못했었다. 특히 DFS 부분 이해가 좀 더 필요한 것 같다.


def dfs(start):
    visited[start] = True
    print(start, end=" ")

    for i in graph[start]:
        if not visited[i]:
            dfs(i)


def bfs(start):
    queue = deque([start])
    visited[start] = True
    while queue:

        v = queue.popleft()
        print(v, end=" ")
        for i in graph[v]:
            if not visited[i]:
                visited[i] = True
                queue.append(i)


N, M, V = map(int, input().split())
graph = [[] for _ in range(N + 1)]

for _ in range(M):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

# 정렬
for i in graph:
    i.sort()

# dfs
visited = [False] * (N + 1)
dfs(V)
print()

# bfs
visited = [False] * (N + 1)
bfs(V)
